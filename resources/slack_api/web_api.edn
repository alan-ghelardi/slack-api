#:slack.api{:version "1.2.0", :methods {:apps.permissions.scopes/list {:endpoint/produces #{"application/json"}, :doc/description "Returns list of scopes this app has on a team.", :doc/tags #{"apps.permissions.scopes" "apps"}, :endpoint/url "https://slack.com/api/apps.permissions.scopes.list", :endpoint/required-scopes #{"none"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}}, :doc/link "https://api.slack.com/methods/apps.permissions.scopes.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/unarchive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Channel to unarchive", :pred string?}}, :doc/description "Unarchives a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.unarchive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.unarchive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/unarchive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "ID of conversation to unarchive", :pred string?}}, :doc/description "Reverses conversation archival.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.unarchive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.unarchive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :mpim/mark {:endpoint/produces #{"application/json"}, :slack.req/payload {:ts #:doc{:description "Timestamp of the most recently seen message.", :pred number?}, :channel #:doc{:description "multiparty direct message channel to set reading cursor in.", :pred string?}}, :doc/description "Sets the read cursor in a multiparty direct message channel.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.mark", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `mpim:write`", :pred string?}}, :endpoint/required-scopes #{"mpim:write"}, :doc/link "https://api.slack.com/methods/mpim.mark", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users/set-presence {:endpoint/produces #{"application/json"}, :slack.req/payload {:presence #:doc{:description "Either `auto` or `away`", :pred string?}}, :doc/description "Manually sets user presence.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.setPresence", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `users:write`", :pred string?}}, :endpoint/required-scopes #{"users:write"}, :doc/link "https://api.slack.com/methods/users.setPresence", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :reminders/complete {:endpoint/produces #{"application/json"}, :slack.req/payload {:reminder #:doc{:description "The ID of the reminder to be marked as complete", :pred string?}}, :doc/description "Marks a reminder as complete.", :doc/tags #{"reminders"}, :endpoint/url "https://slack.com/api/reminders.complete", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `reminders:write`", :pred string?}}, :endpoint/required-scopes #{"reminders:write"}, :doc/link "https://api.slack.com/methods/reminders.complete", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :usergroups.users/update {:endpoint/produces #{"application/json"}, :slack.req/payload {:users #:doc{:description "A comma separated string of encoded user IDs that represent the entire list of users for the User Group.", :pred string?}, :include-count #:doc{:description "Include the number of users in the User Group.", :pred boolean?}, :usergroup #:doc{:description "The encoded ID of the User Group to update.", :pred string?}}, :doc/description "Update the list of users for a User Group", :doc/tags #{"usergroups.users" "usergroups"}, :endpoint/url "https://slack.com/api/usergroups.users.update", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `usergroups:write`", :pred string?}}, :endpoint/required-scopes #{"usergroups:write"}, :doc/link "https://api.slack.com/methods/usergroups.users.update", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :stars/remove {:endpoint/produces #{"application/json"}, :slack.req/payload {:file-comment #:doc{:description "File comment to remove star from.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to remove star from.", :pred number?}, :channel #:doc{:description "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).", :pred string?}, :file #:doc{:description "File to remove star from.", :pred string?}}, :doc/description "Removes a star from an item.", :doc/tags #{"stars"}, :endpoint/url "https://slack.com/api/stars.remove", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `stars:write`", :pred string?}}, :endpoint/required-scopes #{"stars:write"}, :doc/link "https://api.slack.com/methods/stars.remove", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/invite {:endpoint/produces #{"application/json"}, :slack.req/payload {:user #:doc{:description "User to invite.", :pred string?}, :channel #:doc{:description "Private channel to invite user to.", :pred string?}}, :doc/description "Invites a user to a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.invite", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.invite", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files/revoke-public-url {:endpoint/produces #{"application/json"}, :slack.req/payload {:file #:doc{:description "File to revoke", :pred string?}}, :doc/description "Revokes public/external sharing access for a file", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.revokePublicURL", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `files:write:user`", :pred string?}}, :endpoint/required-scopes #{"files:write:user"}, :doc/link "https://api.slack.com/methods/files.revokePublicURL", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users.profile/get {:endpoint/produces #{"application/json"}, :doc/description "Retrieves a user's profile information.", :doc/tags #{"users" "users.profile"}, :endpoint/url "https://slack.com/api/users.profile.get", :endpoint/required-scopes #{"users.profile:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users.profile:read`", :pred string?}, :include-labels #:doc{:description "Include labels for each ID in custom profile fields", :pred boolean?}, :user #:doc{:description "User to retrieve profile info for", :pred string?}}, :doc/link "https://api.slack.com/methods/users.profile.get", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :bots/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a bot user.", :doc/tags #{"bots"}, :endpoint/url "https://slack.com/api/bots.info", :endpoint/required-scopes #{"users:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users:read`", :pred string?}, :bot #:doc{:description "Bot user to get info on", :pred string?}}, :doc/link "https://api.slack.com/methods/bots.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/replies {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a thread of messages posted to a channel", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.replies", :endpoint/required-scopes #{"channels:history"}, :slack.req/query {:thread-ts #:doc{:description "Unique identifier of a thread's parent message", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `channels:history`", :pred string?}, :channel #:doc{:description "Channel to fetch thread from", :pred string?}}, :doc/link "https://api.slack.com/methods/channels.replies", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/replies {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a thread of messages posted to a conversation", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.replies", :endpoint/required-scopes #{"mpim:history" "im:history" "groups:history" "channels:history"}, :slack.req/query {:inclusive #:doc{:description "Include messages with latest or oldest timestamp in results only when either timestamp is specified.", :pred boolean?}, :ts #:doc{:description "Unique identifier of a thread's parent message.", :pred number?}, :cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:history`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Conversation ID to fetch thread from.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/conversations.replies", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/leave {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Conversation to leave", :pred string?}}, :doc/description "Leaves a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.leave", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.leave", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files/delete {:endpoint/produces #{"application/json"}, :slack.req/payload {:file #:doc{:description "ID of file to delete.", :pred string?}}, :doc/description "Deletes a file.", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.delete", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `files:write:user`", :pred string?}}, :endpoint/required-scopes #{"files:write:user"}, :doc/link "https://api.slack.com/methods/files.delete", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :channels/set-purpose {:endpoint/produces #{"application/json"}, :slack.req/payload {:purpose #:doc{:description "The new purpose", :pred string?}, :channel #:doc{:description "Channel to set the purpose of", :pred string?}}, :doc/description "Sets the purpose for a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.setPurpose", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.setPurpose", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :chat/post-message {:endpoint/produces #{"application/json"}, :slack.req/payload {:mrkdwn #:doc{:description "Disable Slack markup parsing by setting to `false`. Enabled by default.", :pred boolean?}, :link-names #:doc{:description "Find and link channel names and usernames.", :pred boolean?}, :unfurl-links #:doc{:description "Pass true to enable unfurling of primarily text-based content.", :pred boolean?}, :attachments #:doc{:description "A JSON-based array of structured attachments, presented as a URL-encoded string.", :pred string?}, :username #:doc{:description "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.", :pred string?}, :channel #:doc{:description "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.", :pred string?}, :icon-url #:doc{:description "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.", :pred string?}, :unfurl-media #:doc{:description "Pass false to disable unfurling of media content.", :pred boolean?}, :parse #:doc{:description "Change how messages are treated. Defaults to `none`. See [below](#formatting).", :pred string?}, :reply-broadcast #:doc{:description "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.", :pred boolean?}, :thread-ts #:doc{:description "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.", :pred number?}, :blocks #:doc{:description "A JSON-based array of structured blocks, presented as a URL-encoded string.", :pred string?}, :icon-emoji #:doc{:description "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.", :pred string?}, :as-user #:doc{:description "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.", :pred boolean?}, :text #:doc{:description "Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you're providing only `attachments` instead. Provide no more than 40,000 characters or [risk truncation](/changelog/2018-04-truncating-really-long-messages).", :pred string?}}, :doc/description "Sends a message to a channel.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.postMessage", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :doc/link "https://api.slack.com/methods/chat.postMessage", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/list {:endpoint/produces #{"application/json"}, :doc/description "Lists all channels in a Slack team.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.list", :endpoint/required-scopes #{"channels:read" "groups:read" "mpim:read" "im:read"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.", :pred int?}, :exclude-archived #:doc{:description "Set to `true` to exclude archived channels from the list", :pred boolean?}, :types #:doc{:description "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`", :pred string?}}, :doc/link "https://api.slack.com/methods/conversations.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :dnd/set-snooze {:doc/description "Turns on Do Not Disturb mode for the current user, or changes its duration.", :doc/tags #{"dnd"}, :doc/link "https://api.slack.com/methods/dnd.setSnooze", :endpoint/url "https://slack.com/api/dnd.setSnooze", :endpoint/verb :post, :endpoint/required-scopes #{"dnd:write"}, :endpoint/consumes #{"application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :channels/list {:endpoint/produces #{"application/json"}, :doc/description "Lists all channels in a Slack team.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.list", :endpoint/required-scopes #{"channels:read"}, :slack.req/query {:exclude-members #:doc{:description "Exclude the `members` collection from each `channel`", :pred boolean?}, :cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `channels:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}, :exclude-archived #:doc{:description "Exclude archived channels from the list", :pred boolean?}}, :doc/link "https://api.slack.com/methods/channels.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/leave {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Channel to leave", :pred string?}}, :doc/description "Leaves a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.leave", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.leave", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/set-purpose {:endpoint/produces #{"application/json"}, :slack.req/payload {:purpose #:doc{:description "A new, specialer purpose", :pred string?}, :channel #:doc{:description "Conversation to set the purpose of", :pred string?}}, :doc/description "Sets the purpose for a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.setPurpose", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.setPurpose", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users/set-photo {:endpoint/produces #{"application/json"}, :slack.req/payload {:image #:doc{:description "File contents via `multipart/form-data`.", :pred string?}, :crop-w #:doc{:description "Width/height of crop box (always square)", :pred int?}, :token #:doc{:description "Authentication token. Requires scope: `users.profile:write`", :pred string?}, :crop-y #:doc{:description "Y coordinate of top-left corner of crop box", :pred int?}, :crop-x #:doc{:description "X coordinate of top-left corner of crop box", :pred int?}}, :doc/description "Set the user profile photo", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.setPhoto", :endpoint/required-scopes #{"users.profile:write"}, :doc/link "https://api.slack.com/methods/users.setPhoto", :endpoint/verb :post, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :rtm/connect {:endpoint/produces #{"application/json"}, :doc/description "Starts a Real Time Messaging session.", :doc/tags #{"rtm"}, :endpoint/url "https://slack.com/api/rtm.connect", :endpoint/required-scopes #{"rtm:stream"}, :slack.req/query {:presence-sub #:doc{:description "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `rtm:stream`", :pred string?}, :batch-presence-aware #:doc{:description "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).", :pred boolean?}}, :doc/link "https://api.slack.com/methods/rtm.connect", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/schedule-message {:endpoint/produces #{"application/json"}, :slack.req/payload {:link-names #:doc{:description "Find and link channel names and usernames.", :pred boolean?}, :unfurl-links #:doc{:description "Pass true to enable unfurling of primarily text-based content.", :pred boolean?}, :post-at #:doc{:description "Unix EPOCH timestamp of time in future to send the message.", :pred string?}, :attachments #:doc{:description "A JSON-based array of structured attachments, presented as a URL-encoded string.", :pred string?}, :channel #:doc{:description "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.", :pred string?}, :unfurl-media #:doc{:description "Pass false to disable unfurling of media content.", :pred boolean?}, :parse #:doc{:description "Change how messages are treated. Defaults to `none`. See [below](#formatting).", :pred string?}, :reply-broadcast #:doc{:description "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.", :pred boolean?}, :thread-ts #:doc{:description "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.", :pred number?}, :blocks #:doc{:description "A JSON-based array of structured blocks, presented as a URL-encoded string.", :pred string?}, :as-user #:doc{:description "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.", :pred boolean?}, :text #:doc{:description "Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you're providing only `attachments` instead. Provide no more than 40,000 characters or [risk truncation](/changelog/2018-04-truncating-really-long-messages).", :pred string?}}, :doc/description "Schedules a message to be sent to a channel.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.scheduleMessage", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :doc/link "https://api.slack.com/methods/chat.scheduleMessage", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users/delete-photo {:endpoint/produces #{"application/json"}, :slack.req/payload {:token #:doc{:description "Authentication token. Requires scope: `users.profile:write`", :pred string?}}, :doc/description "Delete the user profile photo", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.deletePhoto", :endpoint/required-scopes #{"users.profile:write"}, :doc/link "https://api.slack.com/methods/users.deletePhoto", :endpoint/verb :post, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/delete {:endpoint/produces #{"application/json"}, :slack.req/payload {:as-user #:doc{:description "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.", :pred boolean?}, :ts #:doc{:description "Timestamp of the message to be deleted.", :pred number?}, :channel #:doc{:description "Channel containing the message to be deleted.", :pred string?}}, :doc/description "Deletes a message.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.delete", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :doc/link "https://api.slack.com/methods/chat.delete", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :apps/uninstall {:endpoint/produces #{"application/json"}, :doc/description "Uninstalls your app from a workspace.", :doc/tags #{"apps"}, :endpoint/url "https://slack.com/api/apps.uninstall", :endpoint/required-scopes #{"none"}, :slack.req/query {:client-secret #:doc{:description "Issued when you created your application.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :client-id #:doc{:description "Issued when you created your application.", :pred string?}}, :doc/link "https://api.slack.com/methods/apps.uninstall", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/update {:endpoint/produces #{"application/json"}, :slack.req/payload {:blocks #:doc{:description "A JSON-based array of structured blocks, presented as a URL-encoded string.", :pred string?}, :attachments #:doc{:description "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`.", :pred string?}, :text #:doc{:description "New text for the message, using the [default formatting rules](/docs/formatting). It's not required when presenting `attachments`.", :pred string?}, :ts #:doc{:description "Timestamp of the message to be updated.", :pred number?}, :parse #:doc{:description "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. See [below](#formatting).", :pred string?}, :as-user #:doc{:description "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.", :pred boolean?}, :link-names #:doc{:description "Find and link channel names and usernames. Defaults to `none`. See [below](#formatting).", :pred boolean?}, :channel #:doc{:description "Channel containing the message to be updated.", :pred string?}}, :doc/description "Updates a message.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.update", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :doc/link "https://api.slack.com/methods/chat.update", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :usergroups/enable {:endpoint/produces #{"application/json"}, :slack.req/payload {:include-count #:doc{:description "Include the number of users in the User Group.", :pred boolean?}, :usergroup #:doc{:description "The encoded ID of the User Group to enable.", :pred string?}}, :doc/description "Enable a User Group", :doc/tags #{"usergroups"}, :endpoint/url "https://slack.com/api/usergroups.enable", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `usergroups:write`", :pred string?}}, :endpoint/required-scopes #{"usergroups:write"}, :doc/link "https://api.slack.com/methods/usergroups.enable", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :reactions/list {:endpoint/produces #{"application/json"}, :doc/description "Lists reactions made by a user.", :doc/tags #{"reactions"}, :endpoint/url "https://slack.com/api/reactions.list", :endpoint/required-scopes #{"reactions:read"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :full #:doc{:description "If true always return the complete reaction list.", :pred boolean?}, :cursor #:doc{:description "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `reactions:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", :pred int?}, :user #:doc{:description "Show reactions made by this user. Defaults to the authed user.", :pred string?}, :page #:doc{:description nil, :pred string?}}, :doc/link "https://api.slack.com/methods/reactions.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/invite {:endpoint/produces #{"application/json"}, :slack.req/payload {:users #:doc{:description "A comma separated list of user IDs. Up to 30 users may be listed.", :pred string?}, :channel #:doc{:description "The ID of the public or private channel to invite user(s) to.", :pred string?}}, :doc/description "Invites users to a channel.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.invite", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.invite", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :channels/invite {:endpoint/produces #{"application/json"}, :slack.req/payload {:user #:doc{:description "User to invite to channel.", :pred string?}, :channel #:doc{:description "Channel to invite user to.", :pred string?}}, :doc/description "Invites a user to a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.invite", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.invite", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/replies {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a thread of messages posted to a private channel", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.replies", :endpoint/required-scopes #{"groups:history"}, :slack.req/query {:thread-ts #:doc{:description "Unique identifier of a thread's parent message", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `groups:history`", :pred string?}, :channel #:doc{:description "Private channel to fetch thread from", :pred string?}}, :doc/link "https://api.slack.com/methods/groups.replies", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.info", :endpoint/required-scopes #{"channels:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `channels:read`", :pred string?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for this channel. Defaults to `false`", :pred boolean?}, :channel #:doc{:description "Channel to get info on", :pred string?}}, :doc/link "https://api.slack.com/methods/channels.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/info {:endpoint/produces #{"application/json"}, :doc/description "Retrieve information about a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.info", :endpoint/required-scopes #{"channels:read" "groups:read" "mpim:read" "im:read"}, :slack.req/query {:include-num-members #:doc{:description "Set to `true` to include the member count for the specified conversation. Defaults to `false`", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:read`", :pred string?}, :channel #:doc{:description "Conversation ID to learn more about", :pred string?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for this conversation. Defaults to `false`", :pred boolean?}}, :doc/link "https://api.slack.com/methods/conversations.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/create-child {:endpoint/produces #{"application/json"}, :slack.req/payload {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}, :channel #:doc{:description "Private channel to clone and archive.", :pred string?}}, :doc/description "Clones and archives a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.createChild", :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.createChild", :endpoint/verb :post, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :api/test {:endpoint/produces #{"application/json"}, :doc/description "Checks API calling code.", :doc/tags #{"api"}, :endpoint/url "https://slack.com/api/api.test", :endpoint/required-scopes #{"none"}, :slack.req/query {:foo #:doc{:description "example property to return", :pred string?}, :error #:doc{:description "Error response to return", :pred string?}}, :doc/link "https://api.slack.com/methods/api.test", :endpoint/verb :get, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :dnd/end-snooze {:doc/description "Ends the current user's snooze mode immediately.", :doc/tags #{"dnd"}, :doc/link "https://api.slack.com/methods/dnd.endSnooze", :endpoint/url "https://slack.com/api/dnd.endSnooze", :endpoint/verb :post, :endpoint/required-scopes #{"dnd:write"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :users/get-presence {:endpoint/produces #{"application/json"}, :doc/description "Gets user presence information.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.getPresence", :endpoint/required-scopes #{"users:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users:read`", :pred string?}, :user #:doc{:description "User to get presence info on. Defaults to the authed user.", :pred string?}}, :doc/link "https://api.slack.com/methods/users.getPresence", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/me-message {:endpoint/produces #{"application/json"}, :slack.req/payload {:text #:doc{:description "Text of the message to send.", :pred string?}, :channel #:doc{:description "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.", :pred string?}}, :doc/description "Share a me message into a channel.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.meMessage", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write:user`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user"}, :doc/link "https://api.slack.com/methods/chat.meMessage", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/archive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Private channel to archive", :pred string?}}, :doc/description "Archives a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.archive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.archive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/history {:endpoint/produces #{"application/json"}, :doc/description "Fetches history of messages and events from a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.history", :endpoint/required-scopes #{"groups:history"}, :slack.req/query {:count #:doc{:description "Number of messages to return, between 1 and 1000.", :pred int?}, :unreads #:doc{:description "Include `unread_count_display` in the output?", :pred boolean?}, :inclusive #:doc{:description "Include messages with latest or oldest timestamp in results.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `groups:history`", :pred string?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Private channel to fetch history for.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/groups.history", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :pins/remove {:endpoint/produces #{"application/json"}, :slack.req/payload {:file-comment #:doc{:description "File comment to un-pin.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to un-pin.", :pred number?}, :file #:doc{:description "File to un-pin.", :pred string?}, :channel #:doc{:description "Channel where the item is pinned to.", :pred string?}}, :doc/description "Un-pins an item from a channel.", :doc/tags #{"pins"}, :endpoint/url "https://slack.com/api/pins.remove", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `pins:write`", :pred string?}}, :endpoint/required-scopes #{"pins:write"}, :doc/link "https://api.slack.com/methods/pins.remove", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :reminders/delete {:endpoint/produces #{"application/json"}, :slack.req/payload {:reminder #:doc{:description "The ID of the reminder", :pred string?}}, :doc/description "Deletes a reminder.", :doc/tags #{"reminders"}, :endpoint/url "https://slack.com/api/reminders.delete", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `reminders:write`", :pred string?}}, :endpoint/required-scopes #{"reminders:write"}, :doc/link "https://api.slack.com/methods/reminders.delete", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :usergroups/create {:endpoint/produces #{"application/json"}, :slack.req/payload {:handle #:doc{:description "A mention handle. Must be unique among channels, users and User Groups.", :pred string?}, :description #:doc{:description "A short description of the User Group.", :pred string?}, :channels #:doc{:description "A comma separated string of encoded channel IDs for which the User Group uses as a default.", :pred string?}, :include-count #:doc{:description "Include the number of users in each User Group.", :pred boolean?}, :name #:doc{:description "A name for the User Group. Must be unique among User Groups.", :pred string?}}, :doc/description "Create a User Group", :doc/tags #{"usergroups"}, :endpoint/url "https://slack.com/api/usergroups.create", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `usergroups:write`", :pred string?}}, :endpoint/required-scopes #{"usergroups:write"}, :doc/link "https://api.slack.com/methods/usergroups.create", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/members {:endpoint/produces #{"application/json"}, :doc/description "Retrieve members of a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.members", :endpoint/required-scopes #{"channels:read" "groups:read" "mpim:read" "im:read"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}, :channel #:doc{:description "ID of the conversation to retrieve members for", :pred string?}}, :doc/link "https://api.slack.com/methods/conversations.members", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :search/messages {:endpoint/produces #{"application/json"}, :doc/description "Searches for messages matching a query.", :doc/tags #{"search"}, :endpoint/url "https://slack.com/api/search.messages", :endpoint/required-scopes #{"search:read"}, :slack.req/query {:sort-dir #:doc{:description "Change sort direction to ascending (`asc`) or descending (`desc`).", :pred string?}, :query #:doc{:description "Search query.", :pred string?}, :sort #:doc{:description "Return matches sorted by either `score` or `timestamp`.", :pred string?}, :count #:doc{:description "Pass the number of results you want per \"page\". Maximum of `100`.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `search:read`", :pred string?}, :highlight #:doc{:description "Pass a value of `true` to enable query highlight markers (see below).", :pred boolean?}, :page #:doc{:description nil, :pred string?}}, :doc/link "https://api.slack.com/methods/search.messages", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :files/list {:endpoint/produces #{"application/json"}, :doc/description "Lists & filters team files.", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.list", :endpoint/required-scopes #{"files:read"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :channel #:doc{:description "Filter files appearing in a specific channel, indicated by its ID.", :pred string?}, :ts-to #:doc{:description "Filter files created before this timestamp (inclusive).", :pred number?}, :ts-from #:doc{:description "Filter files created after this timestamp (inclusive).", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `files:read`", :pred string?}, :user #:doc{:description "Filter files created by a single user.", :pred string?}, :page #:doc{:description nil, :pred string?}, :types #:doc{:description "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.", :pred string?}}, :doc/link "https://api.slack.com/methods/files.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :admin.users.session/reset {:doc/description "Wipes all valid sessions on all devices for a given user", :doc/tags #{"admin" "admin.users.session"}, :doc/link "https://api.slack.com/methods/admin.users.session.reset", :endpoint/url "https://slack.com/api/admin.users.session.reset", :endpoint/verb :post, :endpoint/required-scopes #{"admin.users:write"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :usergroups/update {:endpoint/produces #{"application/json"}, :slack.req/payload {:handle #:doc{:description "A mention handle. Must be unique among channels, users and User Groups.", :pred string?}, :description #:doc{:description "A short description of the User Group.", :pred string?}, :channels #:doc{:description "A comma separated string of encoded channel IDs for which the User Group uses as a default.", :pred string?}, :include-count #:doc{:description "Include the number of users in the User Group.", :pred boolean?}, :usergroup #:doc{:description "The encoded ID of the User Group to update.", :pred string?}, :name #:doc{:description "A name for the User Group. Must be unique among User Groups.", :pred string?}}, :doc/description "Update an existing User Group", :doc/tags #{"usergroups"}, :endpoint/url "https://slack.com/api/usergroups.update", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `usergroups:write`", :pred string?}}, :endpoint/required-scopes #{"usergroups:write"}, :doc/link "https://api.slack.com/methods/usergroups.update", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :channels/archive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Channel to archive", :pred string?}}, :doc/description "Archives a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.archive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.archive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/mark {:endpoint/produces #{"application/json"}, :slack.req/payload {:ts #:doc{:description "Timestamp of the most recently seen message.", :pred number?}, :channel #:doc{:description "Private channel to set reading cursor in.", :pred string?}}, :doc/description "Sets the read cursor in a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.mark", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.mark", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/archive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "ID of conversation to archive", :pred string?}}, :doc/description "Archives a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.archive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.archive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users/identity {:endpoint/produces #{"application/json"}, :doc/description "Get a user's identity.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.identity", :endpoint/required-scopes #{"identity.basic"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `identity.basic`", :pred string?}}, :doc/link "https://api.slack.com/methods/users.identity", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :reminders/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a reminder.", :doc/tags #{"reminders"}, :endpoint/url "https://slack.com/api/reminders.info", :endpoint/required-scopes #{"reminders:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `reminders:read`", :pred string?}, :reminder #:doc{:description "The ID of the reminder", :pred string?}}, :doc/link "https://api.slack.com/methods/reminders.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :apps.permissions/request {:endpoint/produces #{"application/json"}, :doc/description "Allows an app to request additional scopes", :doc/tags #{"apps.permissions" "apps"}, :endpoint/url "https://slack.com/api/apps.permissions.request", :endpoint/required-scopes #{"none"}, :slack.req/query {:scopes #:doc{:description "A comma separated list of scopes to request for", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :trigger-id #:doc{:description "Token used to trigger the permissions API", :pred string?}}, :doc/link "https://api.slack.com/methods/apps.permissions.request", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :team.profile/get {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a team's profile.", :doc/tags #{"team.profile" "team"}, :endpoint/url "https://slack.com/api/team.profile.get", :endpoint/required-scopes #{"users.profile:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users.profile:read`", :pred string?}, :visibility #:doc{:description "Filter by visibility.", :pred string?}}, :doc/link "https://api.slack.com/methods/team.profile.get", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/open {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Private channel to open.", :pred string?}}, :doc/description "Opens a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.open", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.open", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :migration/exchange {:doc/description "For Enterprise Grid workspaces, map local user IDs to global user IDs", :doc/tags #{"migration"}, :doc/link "https://api.slack.com/methods/migration.exchange", :endpoint/url "https://slack.com/api/migration.exchange", :endpoint/verb :get, :endpoint/required-scopes #{"tokens.basic"}, :endpoint/consumes #{"application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :usergroups.users/list {:doc/description "List all users in a User Group", :doc/tags #{"usergroups.users" "usergroups"}, :doc/link "https://api.slack.com/methods/usergroups.users.list", :endpoint/url "https://slack.com/api/usergroups.users.list", :endpoint/verb :get, :endpoint/required-scopes #{"usergroups:read"}, :endpoint/consumes #{"application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :apps.permissions.users/request {:endpoint/produces #{"application/json"}, :doc/description "Enables an app to trigger a permissions modal to grant an app access to a user access scope.", :doc/tags #{"apps" "apps.permissions.users"}, :endpoint/url "https://slack.com/api/apps.permissions.users.request", :endpoint/required-scopes #{"none"}, :slack.req/query {:scopes #:doc{:description "A comma separated list of user scopes to request for", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :user #:doc{:description "The user this scope is being requested for", :pred string?}, :trigger-id #:doc{:description "Token used to trigger the request", :pred string?}}, :doc/link "https://api.slack.com/methods/apps.permissions.users.request", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :users/set-active {:endpoint/produces #{"application/json"}, :doc/description "Marked a user as active. Deprecated and non-functional.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.setActive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `users:write`", :pred string?}}, :endpoint/required-scopes #{"users:write"}, :doc/link "https://api.slack.com/methods/users.setActive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :oauth/access {:endpoint/produces #{"application/json"}, :doc/description "Exchanges a temporary OAuth verifier code for an access token.", :doc/tags #{"oauth"}, :endpoint/url "https://slack.com/api/oauth.access", :endpoint/required-scopes #{"none"}, :slack.req/query {:code #:doc{:description "The `code` param returned via the OAuth callback.", :pred string?}, :redirect-uri #:doc{:description "This must match the originally submitted URI (if one was sent).", :pred string?}, :client-id #:doc{:description "Issued when you created your application.", :pred string?}, :client-secret #:doc{:description "Issued when you created your application.", :pred string?}, :single-channel #:doc{:description "Request the user to add your app only to a single channel.", :pred boolean?}}, :doc/link "https://api.slack.com/methods/oauth.access", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :apps.permissions/info {:endpoint/produces #{"application/json"}, :doc/description "Returns list of permissions this app has on a team.", :doc/tags #{"apps.permissions" "apps"}, :endpoint/url "https://slack.com/api/apps.permissions.info", :endpoint/required-scopes #{"none"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}}, :doc/link "https://api.slack.com/methods/apps.permissions.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/join {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "ID of conversation to join", :pred string?}}, :doc/description "Joins an existing conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.join", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/conversations.join", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :chat/delete-scheduled-message {:doc/description "Deletes a pending scheduled message from the queue.", :doc/tags #{"chat"}, :doc/link "https://api.slack.com/methods/chat.deleteScheduledMessage", :endpoint/url "https://slack.com/api/chat.deleteScheduledMessage", :endpoint/verb :post, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :users/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a user.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.info", :endpoint/required-scopes #{"users:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users:read`", :pred string?}, :user #:doc{:description "User to get info on", :pred string?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for this user. Defaults to `false`", :pred boolean?}}, :doc/link "https://api.slack.com/methods/users.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/join {:endpoint/produces #{"application/json"}, :slack.req/payload {:validate #:doc{:description "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.", :pred boolean?}, :name #:doc{:description "Name of channel to join", :pred string?}}, :doc/description "Joins a channel, creating it if needed.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.join", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.join", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/list {:endpoint/produces #{"application/json"}, :doc/description "Lists private channels that the calling user has access to.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.list", :endpoint/required-scopes #{"groups:read"}, :slack.req/query {:cursor #:doc{:description "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", :pred string?}, :exclude-members #:doc{:description "Exclude the `members` from each `group`", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `groups:read`", :pred string?}, :exclude-archived #:doc{:description "Don't return archived private channels.", :pred boolean?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", :pred int?}}, :doc/link "https://api.slack.com/methods/groups.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/leave {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Private channel to leave", :pred string?}}, :doc/description "Leaves a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.leave", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.leave", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :team/integration-logs {:endpoint/produces #{"application/json"}, :doc/description "Gets the integration logs for the current team.", :doc/tags #{"team"}, :endpoint/url "https://slack.com/api/team.integrationLogs", :endpoint/required-scopes #{"admin"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :change-type #:doc{:description "Filter logs with this change type. Defaults to all logs.", :pred string?}, :app-id #:doc{:description "Filter logs to this Slack app. Defaults to all logs.", :pred int?}, :token #:doc{:description "Authentication token. Requires scope: `admin`", :pred string?}, :user #:doc{:description "Filter logs generated by this user’s actions. Defaults to all logs.", :pred string?}, :service-id #:doc{:description "Filter logs to this service. Defaults to all logs.", :pred int?}, :page #:doc{:description nil, :pred string?}}, :doc/link "https://api.slack.com/methods/team.integrationLogs", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/post-ephemeral {:endpoint/produces #{"application/json"}, :slack.req/payload {:link-names #:doc{:description "Find and link channel names and usernames.", :pred boolean?}, :attachments #:doc{:description "A JSON-based array of structured attachments, presented as a URL-encoded string.", :pred string?}, :channel #:doc{:description "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.", :pred string?}, :parse #:doc{:description "Change how messages are treated. Defaults to `none`. See [below](#formatting).", :pred string?}, :thread-ts #:doc{:description "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.", :pred number?}, :blocks #:doc{:description "A JSON-based array of structured blocks, presented as a URL-encoded string.", :pred string?}, :as-user #:doc{:description "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.", :pred boolean?}, :user #:doc{:description "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.", :pred string?}, :text #:doc{:description "Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you're providing only `attachments` instead.", :pred string?}}, :doc/description "Sends an ephemeral message to a user in a channel.", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.postEphemeral", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `chat:write`", :pred string?}}, :endpoint/required-scopes #{"chat:write:user" "chat:write:bot"}, :doc/link "https://api.slack.com/methods/chat.postEphemeral", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/open {:endpoint/produces #{"application/json"}, :slack.req/payload {:return-im #:doc{:description "Boolean, indicates you want the full IM channel definition in the response.", :pred boolean?}, :users #:doc{:description "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.", :pred string?}, :channel #:doc{:description "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.", :pred string?}}, :doc/description "Opens or resumes a direct message or multi-person direct message.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.open", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.open", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :mpim/history {:endpoint/produces #{"application/json"}, :doc/description "Fetches history of messages and events from a multiparty direct message.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.history", :endpoint/required-scopes #{"mpim:history"}, :slack.req/query {:count #:doc{:description "Number of messages to return, between 1 and 1000.", :pred int?}, :unreads #:doc{:description "Include `unread_count_display` in the output?", :pred boolean?}, :inclusive #:doc{:description "Include messages with latest or oldest timestamp in results.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `mpim:history`", :pred string?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Multiparty direct message to fetch history for.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/mpim.history", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/rename {:endpoint/produces #{"application/json"}, :slack.req/payload {:validate #:doc{:description "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.", :pred boolean?}, :name #:doc{:description "New name for private channel.", :pred string?}, :channel #:doc{:description "Private channel to rename", :pred string?}}, :doc/description "Renames a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.rename", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.rename", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :pins/list {:endpoint/produces #{"application/json"}, :doc/description "Lists items pinned to a channel.", :doc/tags #{"pins"}, :endpoint/url "https://slack.com/api/pins.list", :endpoint/required-scopes #{"pins:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `pins:read`", :pred string?}, :channel #:doc{:description "Channel to get pinned items for.", :pred string?}}, :doc/link "https://api.slack.com/methods/pins.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :apps.permissions.resources/list {:endpoint/produces #{"application/json"}, :doc/description "Returns list of resource grants this app has on a team.", :doc/tags #{"apps.permissions.resources" "apps"}, :endpoint/url "https://slack.com/api/apps.permissions.resources.list", :endpoint/required-scopes #{"none"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :limit #:doc{:description "The maximum number of items to return.", :pred int?}}, :doc/link "https://api.slack.com/methods/apps.permissions.resources.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :usergroups/list {:endpoint/produces #{"application/json"}, :doc/description "List all User Groups for a team", :doc/tags #{"usergroups"}, :endpoint/url "https://slack.com/api/usergroups.list", :endpoint/required-scopes #{"usergroups:read"}, :slack.req/query {:include-users #:doc{:description "Include the list of users for each User Group.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `usergroups:read`", :pred string?}, :include-count #:doc{:description "Include the number of users in each User Group.", :pred boolean?}, :include-disabled #:doc{:description "Include disabled User Groups.", :pred boolean?}}, :doc/link "https://api.slack.com/methods/usergroups.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/set-topic {:endpoint/produces #{"application/json"}, :slack.req/payload {:topic #:doc{:description "The new topic", :pred string?}, :channel #:doc{:description "Private channel to set the topic of", :pred string?}}, :doc/description "Sets the topic for a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.setTopic", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.setTopic", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :im/close {:doc/description "Close a direct message channel.", :doc/tags #{"im"}, :doc/link "https://api.slack.com/methods/im.close", :endpoint/url "https://slack.com/api/im.close", :endpoint/verb :post, :endpoint/required-scopes #{"im:write"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :team/access-logs {:endpoint/produces #{"application/json"}, :doc/description "Gets the access logs for the current team.", :doc/tags #{"team"}, :endpoint/url "https://slack.com/api/team.accessLogs", :endpoint/required-scopes #{"admin"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `admin`", :pred string?}, :page #:doc{:description nil, :pred string?}, :before #:doc{:description "End of time range of logs to include in results (inclusive).", :pred int?}}, :doc/link "https://api.slack.com/methods/team.accessLogs", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :users/lookup-by-email {:endpoint/produces #{"application/json"}, :doc/description "Find a user with an email address.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.lookupByEmail", :endpoint/required-scopes #{"users:read.email"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `users:read.email`", :pred string?}, :email #:doc{:description "An email address belonging to a user in the workspace", :pred string?}}, :doc/link "https://api.slack.com/methods/users.lookupByEmail", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :reminders/list {:endpoint/produces #{"application/json"}, :doc/description "Lists all reminders created by or for a given user.", :doc/tags #{"reminders"}, :endpoint/url "https://slack.com/api/reminders.list", :endpoint/required-scopes #{"reminders:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `reminders:read`", :pred string?}}, :doc/link "https://api.slack.com/methods/reminders.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :stars/list {:endpoint/produces #{"application/json"}, :doc/description "Lists stars for a user.", :doc/tags #{"stars"}, :endpoint/url "https://slack.com/api/stars.list", :endpoint/required-scopes #{"stars:read"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :cursor #:doc{:description "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `stars:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", :pred int?}, :page #:doc{:description nil, :pred string?}}, :doc/link "https://api.slack.com/methods/stars.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :dnd/info {:endpoint/produces #{"application/json"}, :doc/description "Retrieves a user's current Do Not Disturb status.", :doc/tags #{"dnd"}, :endpoint/url "https://slack.com/api/dnd.info", :endpoint/required-scopes #{"dnd:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `dnd:read`", :pred string?}, :user #:doc{:description "User to fetch status for (defaults to current user)", :pred string?}}, :doc/link "https://api.slack.com/methods/dnd.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/unarchive {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Private channel to unarchive", :pred string?}}, :doc/description "Unarchives a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.unarchive", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.unarchive", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/create {:endpoint/produces #{"application/json"}, :slack.req/payload {:validate #:doc{:description "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.", :pred boolean?}, :name #:doc{:description "Name of private channel to create", :pred string?}}, :doc/description "Creates a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.create", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.create", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :auth/test {:doc/description "Checks authentication & identity.", :doc/tags #{"auth"}, :doc/link "https://api.slack.com/methods/auth.test", :endpoint/url "https://slack.com/api/auth.test", :endpoint/verb :get, :endpoint/required-scopes #{"none"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :reactions/add {:endpoint/produces #{"application/json"}, :slack.req/payload {:name #:doc{:description "Reaction (emoji) name.", :pred string?}, :file-comment #:doc{:description "File comment to add reaction to. Now that [file threads](/changelog/2018-05-file-threads-soon-tread#whats_changed) work the way you'd expect, this argument is deprecated. Specify the timestamp and channel of the message associated with a file instead.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to add reaction to.", :pred number?}, :file #:doc{:description "File to add reaction to. Now that [file threads](/changelog/2018-05-file-threads-soon-tread#whats_changed) work the way you'd expect, this argument is deprecated. Specify the timestamp and channel of the message associated with a file instead.", :pred string?}, :channel #:doc{:description "Channel where the message to add reaction to was posted.", :pred string?}}, :doc/description "Adds a reaction to an item.", :doc/tags #{"reactions"}, :endpoint/url "https://slack.com/api/reactions.add", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `reactions:write`", :pred string?}}, :endpoint/required-scopes #{"reactions:write"}, :doc/link "https://api.slack.com/methods/reactions.add", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :mpim/close {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "MPIM to close.", :pred string?}}, :doc/description "Closes a multiparty direct message channel.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.close", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `mpim:write`", :pred string?}}, :endpoint/required-scopes #{"mpim:write"}, :doc/link "https://api.slack.com/methods/mpim.close", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files/upload {:endpoint/produces #{"application/json"}, :slack.req/payload {:initial-comment #:doc{:description "The message text introducing the file in specified `channels`.", :pred string?}, :channels #:doc{:description "Comma-separated list of channel names or IDs where the file will be shared.", :pred string?}, :content #:doc{:description "File contents via a POST variable. If omitting this parameter, you must provide a `file`.", :pred string?}, :file #:doc{:description "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.", :pred string?}, :title #:doc{:description "Title of file.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `files:write:user`", :pred string?}, :filename #:doc{:description "Filename of file.", :pred string?}, :thread-ts #:doc{:description "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.", :pred number?}, :filetype #:doc{:description "A [file type](/types/file#file_types) identifier.", :pred string?}}, :doc/description "Uploads or creates a file.", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.upload", :endpoint/required-scopes #{"files:write:user"}, :doc/link "https://api.slack.com/methods/files.upload", :endpoint/verb :post, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :conversations/set-topic {:endpoint/produces #{"application/json"}, :slack.req/payload {:topic #:doc{:description "The new topic string. Does not support formatting or linkification.", :pred string?}, :channel #:doc{:description "Conversation to set the topic of", :pred string?}}, :doc/description "Sets the topic for a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.setTopic", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.setTopic", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :channels/kick {:endpoint/produces #{"application/json"}, :slack.req/payload {:user #:doc{:description "User to remove from channel.", :pred string?}, :channel #:doc{:description "Channel to remove user from.", :pred string?}}, :doc/description "Removes a user from a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.kick", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.kick", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :channels/set-topic {:endpoint/produces #{"application/json"}, :slack.req/payload {:topic #:doc{:description "The new topic", :pred string?}, :channel #:doc{:description "Channel to set the topic of", :pred string?}}, :doc/description "Sets the topic for a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.setTopic", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.setTopic", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/kick {:endpoint/produces #{"application/json"}, :slack.req/payload {:user #:doc{:description "User ID to be removed.", :pred string?}, :channel #:doc{:description "ID of conversation to remove user from.", :pred string?}}, :doc/description "Removes a user from a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.kick", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.kick", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :im/replies {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a thread of messages posted to a direct message conversation", :doc/tags #{"im"}, :endpoint/url "https://slack.com/api/im.replies", :endpoint/required-scopes #{"im:history"}, :slack.req/query {:thread-ts #:doc{:description "Unique identifier of a thread's parent message", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `im:history`", :pred string?}, :channel #:doc{:description "Direct message channel to fetch thread from", :pred string?}}, :doc/link "https://api.slack.com/methods/im.replies", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/mark {:endpoint/produces #{"application/json"}, :slack.req/payload {:ts #:doc{:description "Timestamp of the most recently seen message.", :pred number?}, :channel #:doc{:description "Channel to set reading cursor in.", :pred string?}}, :doc/description "Sets the read cursor in a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.mark", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.mark", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files.comments/delete {:endpoint/produces #{"application/json"}, :slack.req/payload {:id #:doc{:description "The comment to delete.", :pred string?}, :file #:doc{:description "File to delete a comment from.", :pred string?}}, :doc/description "Deletes an existing comment on a file.", :doc/tags #{"files.comments" "files"}, :endpoint/url "https://slack.com/api/files.comments.delete", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `files:write:user`", :pred string?}}, :endpoint/required-scopes #{"files:write:user"}, :doc/link "https://api.slack.com/methods/files.comments.delete", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :auth/revoke {:endpoint/produces #{"application/json"}, :doc/description "Revokes a token.", :doc/tags #{"auth"}, :endpoint/url "https://slack.com/api/auth.revoke", :endpoint/required-scopes #{"none"}, :slack.req/query {:test #:doc{:description "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}}, :doc/link "https://api.slack.com/methods/auth.revoke", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :team/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about the current team.", :doc/tags #{"team"}, :endpoint/url "https://slack.com/api/team.info", :endpoint/required-scopes #{"team:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `team:read`", :pred string?}, :team #:doc{:description "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels", :pred string?}}, :doc/link "https://api.slack.com/methods/team.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :dialog/open {:doc/description "Open a dialog with a user", :doc/tags #{"dialog"}, :doc/link "https://api.slack.com/methods/dialog.open", :endpoint/url "https://slack.com/api/dialog.open", :endpoint/verb :get, :endpoint/required-scopes #{"none"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :im/history {:endpoint/produces #{"application/json"}, :doc/description "Fetches history of messages and events from direct message channel.", :doc/tags #{"im"}, :endpoint/url "https://slack.com/api/im.history", :endpoint/required-scopes #{"im:history"}, :slack.req/query {:count #:doc{:description "Number of messages to return, between 1 and 1000.", :pred int?}, :unreads #:doc{:description "Include `unread_count_display` in the output?", :pred boolean?}, :inclusive #:doc{:description "Include messages with latest or oldest timestamp in results.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `im:history`", :pred string?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Direct message channel to fetch history for.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/im.history", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/create {:endpoint/produces #{"application/json"}, :slack.req/payload {:validate #:doc{:description "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.", :pred boolean?}, :name #:doc{:description "Name of channel to create", :pred string?}}, :doc/description "Creates a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.create", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.create", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/create {:endpoint/produces #{"application/json"}, :slack.req/payload {:user-ids #:doc{:description "**Required** for workspace apps. A list of between 1 and 30 human users that will be added to the newly-created conversation. This argument has no effect when used by classic Slack apps.", :pred string?}, :name #:doc{:description "Name of the public or private channel to create", :pred string?}, :is-private #:doc{:description "Create a private channel instead of a public one", :pred boolean?}}, :doc/description "Initiates a public or private channel-based conversation", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.create", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.create", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :pins/add {:endpoint/produces #{"application/json"}, :slack.req/payload {:file-comment #:doc{:description "File comment to pin.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to pin.", :pred number?}, :file #:doc{:description "File to pin.", :pred string?}, :channel #:doc{:description "Channel to pin the item in.", :pred string?}}, :doc/description "Pins an item to a channel.", :doc/tags #{"pins"}, :endpoint/url "https://slack.com/api/pins.add", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `pins:write`", :pred string?}}, :endpoint/required-scopes #{"pins:write"}, :doc/link "https://api.slack.com/methods/pins.add", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :mpim/replies {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a thread of messages posted to a direct message conversation from a multiparty direct message.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.replies", :endpoint/required-scopes #{"mpim:history"}, :slack.req/query {:thread-ts #:doc{:description "Unique identifier of a thread's parent message.", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `mpim:history`", :pred string?}, :channel #:doc{:description "Multiparty direct message channel to fetch thread from.", :pred string?}}, :doc/link "https://api.slack.com/methods/mpim.replies", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :mpim/open {:endpoint/produces #{"application/json"}, :slack.req/payload {:users #:doc{:description "Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned.", :pred string?}}, :doc/description "This method opens a multiparty direct message.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.open", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `mpim:write`", :pred string?}}, :endpoint/required-scopes #{"mpim:write"}, :doc/link "https://api.slack.com/methods/mpim.open", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users/conversations {:endpoint/produces #{"application/json"}, :doc/description "List conversations the calling user may access.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.conversations", :endpoint/required-scopes #{"channels:read" "groups:read" "mpim:read" "im:read"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.", :pred int?}, :user #:doc{:description "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.", :pred string?}, :exclude-archived #:doc{:description "Set to `true` to exclude archived channels from the list", :pred boolean?}, :types #:doc{:description "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`", :pred string?}}, :doc/link "https://api.slack.com/methods/users.conversations", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :emoji/list {:endpoint/produces #{"application/json"}, :doc/description "Lists custom emoji for a team.", :doc/tags #{"emoji"}, :endpoint/url "https://slack.com/api/emoji.list", :endpoint/required-scopes #{"emoji:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `emoji:read`", :pred string?}}, :doc/link "https://api.slack.com/methods/emoji.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :reactions/get {:endpoint/produces #{"application/json"}, :doc/description "Gets reactions for an item.", :doc/tags #{"reactions"}, :endpoint/url "https://slack.com/api/reactions.get", :endpoint/required-scopes #{"reactions:read"}, :slack.req/query {:full #:doc{:description "If true always return the complete reaction list.", :pred boolean?}, :file-comment #:doc{:description "File comment to get reactions for.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to get reactions for.", :pred number?}, :token #:doc{:description "Authentication token. Requires scope: `reactions:read`", :pred string?}, :file #:doc{:description "File to get reactions for.", :pred string?}, :channel #:doc{:description "Channel where the message to get reactions for was posted.", :pred string?}}, :doc/link "https://api.slack.com/methods/reactions.get", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat/unfurl {:endpoint/produces #{"application/json"}, :slack.req/payload {:user-auth-message #:doc{:description "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior", :pred string?}, :user-auth-required #:doc{:description "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain", :pred boolean?}, :unfurls #:doc{:description "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.", :pred string?}, :ts #:doc{:description "Timestamp of the message to add unfurl behavior to.", :pred string?}, :user-auth-url #:doc{:description "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.", :pred string?}, :channel #:doc{:description "Channel ID of the message", :pred string?}}, :doc/description "Provide custom unfurl behavior for user-posted URLs", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.unfurl", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `links:write`", :pred string?}}, :endpoint/required-scopes #{"links:write"}, :doc/link "https://api.slack.com/methods/chat.unfurl", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :mpim/list {:endpoint/produces #{"application/json"}, :doc/description "Lists multiparty direct message channels for the calling user.", :doc/tags #{"mpim"}, :endpoint/url "https://slack.com/api/mpim.list", :endpoint/required-scopes #{"mpim:read"}, :slack.req/query {:cursor #:doc{:description "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `mpim:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", :pred int?}}, :doc/link "https://api.slack.com/methods/mpim.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/kick {:endpoint/produces #{"application/json"}, :slack.req/payload {:user #:doc{:description "User to remove from private channel.", :pred string?}, :channel #:doc{:description "Private channel to remove user from.", :pred string?}}, :doc/description "Removes a user from a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.kick", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.kick", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :groups/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.info", :endpoint/required-scopes #{"groups:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `groups:read`", :pred string?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for this group. Defaults to `false`", :pred boolean?}, :channel #:doc{:description "Private channel to get info on", :pred string?}}, :doc/link "https://api.slack.com/methods/groups.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :oauth/token {:endpoint/produces #{"application/json"}, :doc/description "Exchanges a temporary OAuth verifier code for a workspace token.", :doc/tags #{"oauth"}, :endpoint/url "https://slack.com/api/oauth.token", :endpoint/required-scopes #{"none"}, :slack.req/query {:client-secret #:doc{:description "Issued when you created your application.", :pred string?}, :code #:doc{:description "The `code` param returned via the OAuth callback.", :pred string?}, :single-channel #:doc{:description "Request the user to add your app only to a single channel.", :pred boolean?}, :client-id #:doc{:description "Issued when you created your application.", :pred string?}, :redirect-uri #:doc{:description "This must match the originally submitted URI (if one was sent).", :pred string?}}, :doc/link "https://api.slack.com/methods/oauth.token", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :users/list {:endpoint/produces #{"application/json"}, :doc/description "Lists all users in a Slack team.", :doc/tags #{"users"}, :endpoint/url "https://slack.com/api/users.list", :endpoint/required-scopes #{"users:read"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `users:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for users. Defaults to `false`", :pred boolean?}}, :doc/link "https://api.slack.com/methods/users.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :im/mark {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Direct message channel to set reading cursor in.", :pred string?}, :ts #:doc{:description "Timestamp of the most recently seen message.", :pred number?}}, :doc/description "Sets the read cursor in a direct message channel.", :doc/tags #{"im"}, :endpoint/url "https://slack.com/api/im.mark", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `im:write`", :pred string?}}, :endpoint/required-scopes #{"im:write"}, :doc/link "https://api.slack.com/methods/im.mark", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :team/billable-info {:doc/description "Gets billable users information for the current team.", :doc/tags #{"team"}, :doc/link "https://api.slack.com/methods/team.billableInfo", :endpoint/url "https://slack.com/api/team.billableInfo", :endpoint/verb :get, :endpoint/required-scopes #{"admin"}, :endpoint/consumes #{"application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :channels/history {:endpoint/produces #{"application/json"}, :doc/description "Fetches history of messages and events from a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.history", :endpoint/required-scopes #{"channels:history"}, :slack.req/query {:count #:doc{:description "Number of messages to return, between 1 and 1000.", :pred int?}, :unreads #:doc{:description "Include `unread_count_display` in the output?", :pred boolean?}, :inclusive #:doc{:description "Include messages with latest or oldest timestamp in results.", :pred boolean?}, :token #:doc{:description "Authentication token. Requires scope: `channels:history`", :pred string?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Channel to fetch history for.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/channels.history", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :reactions/remove {:endpoint/produces #{"application/json"}, :slack.req/payload {:name #:doc{:description "Reaction (emoji) name.", :pred string?}, :file-comment #:doc{:description "File comment to remove reaction from.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to remove reaction from.", :pred number?}, :file #:doc{:description "File to remove reaction from.", :pred string?}, :channel #:doc{:description "Channel where the message to remove reaction from was posted.", :pred string?}}, :doc/description "Removes a reaction from an item.", :doc/tags #{"reactions"}, :endpoint/url "https://slack.com/api/reactions.remove", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `reactions:write`", :pred string?}}, :endpoint/required-scopes #{"reactions:write"}, :doc/link "https://api.slack.com/methods/reactions.remove", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/history {:endpoint/produces #{"application/json"}, :doc/description "Fetches a conversation's history of messages and events.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.history", :endpoint/required-scopes #{"mpim:history" "im:history" "groups:history" "channels:history"}, :slack.req/query {:inclusive #:doc{:description "Include messages with latest or oldest timestamp in results only when either timestamp is specified.", :pred boolean?}, :cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `conversations:history`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}, :oldest #:doc{:description "Start of time range of messages to include in results.", :pred number?}, :channel #:doc{:description "Conversation ID to fetch history for.", :pred string?}, :latest #:doc{:description "End of time range of messages to include in results.", :pred number?}}, :doc/link "https://api.slack.com/methods/conversations.history", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :im/open {:endpoint/produces #{"application/json"}, :slack.req/payload {:return-im #:doc{:description "Boolean, indicates you want the full IM channel definition in the response.", :pred boolean?}, :user #:doc{:description "User to open a direct message channel with.", :pred string?}, :include-locale #:doc{:description "Set this to `true` to receive the locale for this im. Defaults to `false`", :pred boolean?}}, :doc/description "Opens a direct message channel.", :doc/tags #{"im"}, :endpoint/url "https://slack.com/api/im.open", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `im:write`", :pred string?}}, :endpoint/required-scopes #{"im:write"}, :doc/link "https://api.slack.com/methods/im.open", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :chat/get-permalink {:endpoint/produces #{"application/json"}, :doc/description "Retrieve a permalink URL for a specific extant message", :doc/tags #{"chat"}, :endpoint/url "https://slack.com/api/chat.getPermalink", :endpoint/required-scopes #{"none"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :message-ts #:doc{:description "A message's `ts` value, uniquely identifying it within a channel", :pred number?}, :channel #:doc{:description "The ID of the conversation or channel containing the message", :pred string?}}, :doc/link "https://api.slack.com/methods/chat.getPermalink", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :usergroups/disable {:endpoint/produces #{"application/json"}, :slack.req/payload {:include-count #:doc{:description "Include the number of users in the User Group.", :pred boolean?}, :usergroup #:doc{:description "The encoded ID of the User Group to disable.", :pred string?}}, :doc/description "Disable an existing User Group", :doc/tags #{"usergroups"}, :endpoint/url "https://slack.com/api/usergroups.disable", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `usergroups:write`", :pred string?}}, :endpoint/required-scopes #{"usergroups:write"}, :doc/link "https://api.slack.com/methods/usergroups.disable", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files/shared-public-url {:endpoint/produces #{"application/json"}, :slack.req/payload {:file #:doc{:description "File to share", :pred string?}}, :doc/description "Enables a file for public/external sharing.", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.sharedPublicURL", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `files:write:user`", :pred string?}}, :endpoint/required-scopes #{"files:write:user"}, :doc/link "https://api.slack.com/methods/files.sharedPublicURL", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/rename {:endpoint/produces #{"application/json"}, :slack.req/payload {:name #:doc{:description "New name for conversation.", :pred string?}, :channel #:doc{:description "ID of conversation to rename", :pred string?}}, :doc/description "Renames a conversation.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.rename", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.rename", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :users.profile/set {:endpoint/produces #{"application/json"}, :slack.req/payload {:profile #:doc{:description "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.", :pred string?}, :user #:doc{:description "ID of user to change. This argument may only be specified by team admins on paid teams.", :pred string?}, :value #:doc{:description "Value to set a single key to. Usable only if `profile` is not passed.", :pred string?}, :name #:doc{:description "Name of a single key to set. Usable only if `profile` is not passed.", :pred string?}}, :doc/description "Set the profile information for a user.", :doc/tags #{"users" "users.profile"}, :endpoint/url "https://slack.com/api/users.profile.set", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `users.profile:write`", :pred string?}}, :endpoint/required-scopes #{"users.profile:write"}, :doc/link "https://api.slack.com/methods/users.profile.set", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :apps.permissions.users/list {:endpoint/produces #{"application/json"}, :doc/description "Returns list of user grants and corresponding scopes this app has on a team.", :doc/tags #{"apps" "apps.permissions.users"}, :endpoint/url "https://slack.com/api/apps.permissions.users.list", :endpoint/required-scopes #{"none"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}, :limit #:doc{:description "The maximum number of items to return.", :pred int?}}, :doc/link "https://api.slack.com/methods/apps.permissions.users.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :channels/rename {:endpoint/produces #{"application/json"}, :slack.req/payload {:validate #:doc{:description "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.", :pred boolean?}, :name #:doc{:description "New name for channel.", :pred string?}, :channel #:doc{:description "Channel to rename", :pred string?}}, :doc/description "Renames a channel.", :doc/tags #{"channels"}, :endpoint/url "https://slack.com/api/channels.rename", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `channels:write`", :pred string?}}, :endpoint/required-scopes #{"channels:write"}, :doc/link "https://api.slack.com/methods/channels.rename", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :files/info {:endpoint/produces #{"application/json"}, :doc/description "Gets information about a team file.", :doc/tags #{"files"}, :endpoint/url "https://slack.com/api/files.info", :endpoint/required-scopes #{"files:read"}, :slack.req/query {:count #:doc{:description nil, :pred string?}, :cursor #:doc{:description "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `files:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", :pred int?}, :file #:doc{:description "Specify a file by providing its ID.", :pred string?}, :page #:doc{:description nil, :pred string?}}, :doc/link "https://api.slack.com/methods/files.info", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :chat.scheduled-messages/list {:endpoint/produces #{"application/json"}, :doc/description "Returns a list of scheduled messages.", :doc/tags #{"chat.scheduledMessages" "chat"}, :endpoint/url "https://slack.com/api/chat.scheduledMessages.list", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `none`", :pred string?}}, :endpoint/required-scopes #{"none"}, :slack.req/query {:cursor #:doc{:description "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.", :pred string?}, :limit #:doc{:description "Maximum number of original entries to return.", :pred int?}, :oldest #:doc{:description "A UNIX timestamp of the oldest value in the time range", :pred number?}, :channel #:doc{:description "The channel of the scheduled messages", :pred string?}, :latest #:doc{:description "A UNIX timestamp of the latest value in the time range", :pred number?}}, :doc/link "https://api.slack.com/methods/chat.scheduledMessages.list", :endpoint/verb :get, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :dnd/end-dnd {:doc/description "Ends the current user's Do Not Disturb session immediately.", :doc/tags #{"dnd"}, :doc/link "https://api.slack.com/methods/dnd.endDnd", :endpoint/url "https://slack.com/api/dnd.endDnd", :endpoint/verb :post, :endpoint/required-scopes #{"dnd:write"}, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}, :endpoint/produces #{"application/json"}}, :stars/add {:endpoint/produces #{"application/json"}, :slack.req/payload {:file-comment #:doc{:description "File comment to add star to.", :pred string?}, :timestamp #:doc{:description "Timestamp of the message to add star to.", :pred number?}, :channel #:doc{:description "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).", :pred string?}, :file #:doc{:description "File to add star to.", :pred string?}}, :doc/description "Adds a star to an item.", :doc/tags #{"stars"}, :endpoint/url "https://slack.com/api/stars.add", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `stars:write`", :pred string?}}, :endpoint/required-scopes #{"stars:write"}, :doc/link "https://api.slack.com/methods/stars.add", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :conversations/close {:endpoint/produces #{"application/json"}, :slack.req/payload {:channel #:doc{:description "Conversation to close.", :pred string?}}, :doc/description "Closes a direct message or multi-person direct message.", :doc/tags #{"conversations"}, :endpoint/url "https://slack.com/api/conversations.close", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `conversations:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write" "channels:write" "im:write" "mpim:write"}, :doc/link "https://api.slack.com/methods/conversations.close", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :reminders/add {:endpoint/produces #{"application/json"}, :slack.req/payload {:text #:doc{:description "The content of the reminder", :pred string?}, :user #:doc{:description "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.", :pred string?}, :time #:doc{:description "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")", :pred string?}}, :doc/description "Creates a reminder.", :doc/tags #{"reminders"}, :endpoint/url "https://slack.com/api/reminders.add", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `reminders:write`", :pred string?}}, :endpoint/required-scopes #{"reminders:write"}, :doc/link "https://api.slack.com/methods/reminders.add", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}, :im/list {:endpoint/produces #{"application/json"}, :doc/description "Lists direct message channels for the calling user.", :doc/tags #{"im"}, :endpoint/url "https://slack.com/api/im.list", :endpoint/required-scopes #{"im:read"}, :slack.req/query {:cursor #:doc{:description "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", :pred string?}, :token #:doc{:description "Authentication token. Requires scope: `im:read`", :pred string?}, :limit #:doc{:description "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", :pred int?}}, :doc/link "https://api.slack.com/methods/im.list", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :dnd/team-info {:endpoint/produces #{"application/json"}, :doc/description "Retrieves the Do Not Disturb status for up to 50 users on a team.", :doc/tags #{"dnd"}, :endpoint/url "https://slack.com/api/dnd.teamInfo", :endpoint/required-scopes #{"dnd:read"}, :slack.req/query {:token #:doc{:description "Authentication token. Requires scope: `dnd:read`", :pred string?}, :users #:doc{:description "Comma-separated list of users to fetch Do Not Disturb status for", :pred string?}}, :doc/link "https://api.slack.com/methods/dnd.teamInfo", :endpoint/verb :get, :endpoint/consumes #{"application/x-www-form-urlencoded"}}, :groups/set-purpose {:endpoint/produces #{"application/json"}, :slack.req/payload {:purpose #:doc{:description "The new purpose", :pred string?}, :channel #:doc{:description "Private channel to set the purpose of", :pred string?}}, :doc/description "Sets the purpose for a private channel.", :doc/tags #{"groups"}, :endpoint/url "https://slack.com/api/groups.setPurpose", :slack.req/headers {:token #:doc{:description "Authentication token. Requires scope: `groups:write`", :pred string?}}, :endpoint/required-scopes #{"groups:write"}, :doc/link "https://api.slack.com/methods/groups.setPurpose", :endpoint/verb :post, :endpoint/consumes #{"application/json" "application/x-www-form-urlencoded"}}}}